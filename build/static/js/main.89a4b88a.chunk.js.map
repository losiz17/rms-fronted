{"version":3,"sources":["components/header.jsx","components/search.jsx","App.js","serviceWorker.js","index.js"],"names":["header","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","search","props","state","req","tagName","res","onSubmit","bind","onTextAreaChange","e","preventDefault","console","log","this","fetch","method","headers","Accept","body","then","response","json","responseJson","setState","catch","error","target","value","placeholder","desc","onChange","map","Component","App","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mOA+CeA,G,WA7CA,WACX,OACI,yBAAKC,UAAU,mDACX,uBAAGA,UAAU,eAAeC,KAAK,KAAjC,UAGA,4BACID,UAAU,iBACVE,KAAK,SACLC,cAAY,WACZC,cAAY,aACZC,gBAAc,YACdC,gBAAc,QACdC,aAAW,qBAEX,0BAAMP,UAAU,yBAEpB,yBAAKA,UAAU,2BAA2BQ,GAAG,aACzC,wBAAIR,UAAU,cACV,wBAAIA,UAAU,mBACV,uBAAGA,UAAU,WAAWC,KAAK,KAA7B,QACS,0BAAMD,UAAU,WAAhB,eAGb,wBAAIA,UAAU,YACV,uBAAGA,UAAU,WAAWC,KAAK,KAA7B,aAIJ,wBAAID,UAAU,YACV,uBAAGA,UAAU,WAAWC,KAAK,KAA7B,YAIJ,wBAAID,UAAU,YACV,uBAAGA,UAAU,oBAAoBC,KAAK,KAAtC,kB,0CCgDTQ,E,YAjFX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CAETC,IAAK,CAAEC,QAAS,IAChBC,IAAK,IAGT,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBATT,E,sEAiBVE,GAAI,IAAD,OACRA,EAAEC,iBACFC,QAAQC,IAAIC,KAAKX,MAAMC,KACvBW,MAAM,0CAA2C,CAC7CC,OAAQ,OACRC,QAAS,CACLC,OAAQ,mBACR,eAAgB,oBAEpBC,KAAML,KAAKX,MAAMC,MAEhBgB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACF,EAAKC,SAAS,CAEVlB,IAAKiB,OAGZE,OAAM,SAAAC,GACHd,QAAQc,MAAMA,Q,uCAIThB,GACbI,KAAKU,SAAS,CAAEpB,IAAK,CAAEC,QAASK,EAAEiB,OAAOC,W,+BAWzC,OACI,0BAAMpC,UAAU,cAAce,SAAUO,KAAKP,UAMzC,yBAAKf,UAAU,2BACX,2BACIA,UAAU,uBACVE,KAAK,OACLmC,YAAY,SACZ9B,aAAW,SACX6B,MAAOd,KAAKX,MAAM2B,KAClBC,SAAUjB,KAAKL,oBAIvB,6BACI,4BAAQjB,UAAU,uBAAuBE,KAAK,UAA9C,iBAIHoB,KAAKX,MAAMG,IAAI0B,KAAI,SAAA1B,GAAG,OAAIA,U,GA5EtB2B,aC4BNC,MAzBf,WACI,OACI,yBAAK1C,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,4BAAQA,UAAU,cAEd,mCACS,4CADT,wBAIA,uBACIA,UAAU,WACVC,KAAK,sBACLkC,OAAO,SACPQ,IAAI,uBAJR,eAQA,wCCbIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,MAAK,SAAA4B,GACjCA,EAAaC,iB","file":"static/js/main.89a4b88a.chunk.js","sourcesContent":["import React from \"react\";\n\nconst header = () => {\n    return (\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-primary\">\n            <a className=\"navbar-brand\" href=\"#\">\n                Navbar\n            </a>\n            <button\n                className=\"navbar-toggler\"\n                type=\"button\"\n                data-toggle=\"collapse\"\n                data-target=\"#navbarNav\"\n                aria-controls=\"navbarNav\"\n                aria-expanded=\"false\"\n                aria-label=\"Toggle navigation\"\n            >\n                <span className=\"navbar-toggler-icon\"></span>\n            </button>\n            <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n                <ul className=\"navbar-nav\">\n                    <li className=\"nav-item active\">\n                        <a className=\"nav-link\" href=\"#\">\n                            Home <span className=\"sr-only\">(current)</span>\n                        </a>\n                    </li>\n                    <li className=\"nav-item\">\n                        <a className=\"nav-link\" href=\"#\">\n                            Features\n                        </a>\n                    </li>\n                    <li className=\"nav-item\">\n                        <a className=\"nav-link\" href=\"#\">\n                            Pricing\n                        </a>\n                    </li>\n                    <li className=\"nav-item\">\n                        <a className=\"nav-link disabled\" href=\"#\">\n                            Disabled\n                        </a>\n                    </li>\n                </ul>\n            </div>\n        </nav>\n    );\n};\n\nexport default header;\n","import React, { Component } from \"react\";\nimport \"../App.css\";\n\nclass search extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // usstate: props.initState,\n            req: { tagName: \"\" },\n            res: []\n        };\n        // this.onChange = this.onChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n        this.onTextAreaChange = this.onTextAreaChange.bind(this);\n    }\n\n    // onChange(e) {\n    //     console.log(e.target.value);\n    //     this.setState({ usstate: e.target.value });\n    // }\n\n    onSubmit(e) {\n        e.preventDefault();\n        console.log(this.state.req);\n        fetch(\"http://0.0.1.1:8000/1api/v1/tags/search\", {\n            method: \"POST\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\"\n            },\n            body: this.state.req\n        })\n            .then(response => response.json())\n            .then(responseJson => {\n                this.setState({\n                    // loading: true,\n                    res: responseJson\n                });\n            })\n            .catch(error => {\n                console.error(error);\n            });\n    }\n\n    onTextAreaChange(e) {\n        this.setState({ req: { tagName: e.target.value } });\n    }\n\n    render() {\n        // var states = [\n        //     { code: \"CA\", name: \"California\" },\n        //     { code: \"HI\", name: \"Hawaii\" },\n        //     { code: \"TX\", name: \"Texas\" },\n        //     { code: \"WA\", name: \"Washington\" }\n        // ];\n\n        return (\n            <form className=\"form-inline\" onSubmit={this.onSubmit}>\n                {/* <div>\n                    <select value={this.state.usstate} onChange={this.onChange}>\n                        {options}\n                    </select>\n                </div> */}\n                <div className=\"form-group mx-sm-3 mb-2\">\n                    <input\n                        className=\"form-control mr-sm-2\"\n                        type=\"text\"\n                        placeholder=\"Search\"\n                        aria-label=\"Search\"\n                        value={this.state.desc}\n                        onChange={this.onTextAreaChange}\n                    />\n                </div>\n\n                <div>\n                    <button className=\"btn btn-primary mb-2\" type=\"submit\">\n                        検索\n                    </button>\n                </div>\n                {this.state.res.map(res => res)}\n            </form>\n        );\n    }\n}\n\nexport default search;\n","import React from \"react\";\n// import logo from './logo.svg';\nimport \"./App.css\";\nimport Header from \"./components/header.jsx\";\nimport Search from \"./components/search.jsx\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Header />\n            <Search />\n            <header className=\"App-header\">\n                {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n                <p>\n                    Edit <code>src/App.js</code> and save to reload.\n                </p>\n\n                <a\n                    className=\"App-link\"\n                    href=\"https://reactjs.org\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    Learn React\n                </a>\n                <button>a</button>\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}